void DeviceHandler::onTimerTriggered()
{

    QByteArray data;
    data.resize(5);
    data[0] = 0x55;
    data[1] = 0x11;
    data[2] = 0x55;
    data[3] = 0x11;
    data[4] = 0x55;

#define CHUNK_SIZE 16
    qDebug() << "onTimerTriggered::writeTest.. ";
    if (m_service->state() == QLowEnergyService::ServiceDiscovered)
        qDebug()<<"Service is in Discovered State";
    else
        qDebug()<<"Service state is shitty, still trying to send";

    if(m_service && m_writeCharacteristic.isValid())
    {
        if(data.length() > CHUNK_SIZE)
        {
            int sentBytes = 0;
            while (sentBytes < data.length())
            {
                m_service->writeCharacteristic( m_writeCharacteristic, data.mid(sentBytes, CHUNK_SIZE), m_writeMode);
                sentBytes += CHUNK_SIZE;
                if(m_writeMode == QLowEnergyService::WriteWithResponse){
                    //waitForWrite();
                    qDebug()<<"waitForWrite() commented out";
                    if(m_service->error() != QLowEnergyService::NoError)
                        return;
                }
            }

        }
        else
        {
            m_service->writeCharacteristic(m_writeCharacteristic, data, QLowEnergyService::WriteWithResponse); /*  m_writeMode */
            qDebug()<<"writecall";
        }
    }

    //    qDebug()<<"Trying to Read";
    //    if(m_service && m_readCharacteristic.isValid())
    //        m_service->readCharacteristic(m_readCharacteristic);
}
//    enum SomeType { A, B, C, D };
//    Q_ENUM(SomeType);

class TerminalDataObject : public QObject
{
    Q_OBJECT

    Q_PROPERTY(QString str MEMBER m_string NOTIFY strChanged)
    Q_PROPERTY(QColor clr MEMBER m_color NOTIFY clrChanged)
signals:
    void strChanged();
    void clrChanged();

private:
    QString m_string;
    QColor m_color;
public:
    TerminalDataObject(QObject *parent = nullptr, QString t_str = nullptr, QColor t_clr = nullptr): m_string(t_str), m_color(t_clr)
    {

    }

};

//        connect(m_service, SIGNAL(error(QLowEnergyService::ServiceError)),
//                this, SLOT(serviceError(QLowEnergyService::ServiceError)));

        //m_service->discoverDetails();

//        QString chars = "";
//        QList<QLowEnergyCharacteristic> clist = m_service->characteristics();
//        for (int i = 0; i < clist.size(); i++){
//            chars = clist.at(i).uuid().toString() + " - " + clist.at(i).name() + ": " + QString(clist.at(i).value());
//            chars = chars + ". Value size: " + QString::number(clist.at(i).value().size()) + "<br>";
//        }
//        if (chars.isEmpty()){
//            chars = "No characteristics found";
//        }
//        qDebug()<<chars;

//        const QLowEnergyCharacteristic txChar = m_service->characteristic(QBluetoothUuid(BLE_UART_TX_CHAR));
//        if (!txChar.isValid()) {
//            setError("TX Char not found.");
//            qDebug("TX Char not found.");
//        }
//        else
//        {
//            qDebug("TX Char found");

//        }
//        QLowEnergyDescriptor txDesc  = txChar.descriptor(QBluetoothUuid::ClientCharacteristicConfiguration);
//        if (!txDesc.isValid())
//            return;

//        qDebug()<<"still trying to activate the notifications!";


//        // enable notification
//        m_service->writeDescriptor(txDesc, QByteArray::fromHex("0100"));

        // disable notification
        //service->writeDescriptor(notification, QByteArray::fromHex("0000"));

        // wait until descriptorWritten() signal is emitted
        // to confirm successful write


setInfo(tr("Service discovered."));
qDebug("Service discovered.");

QString chars = "";
QList<QLowEnergyCharacteristic> clist = m_service->characteristics();
for (int i = 0; i < clist.size(); i++){
    chars = clist.at(i).uuid().toString() + " - " + clist.at(i).name() + ": " + QString(clist.at(i).value());
    chars = chars + ". Value size: " + QString::number(clist.at(i).value().size()) + "<br>";
}
if (chars.isEmpty()){
    chars = "No characteristics found";
}
qDebug()<<chars;

const QLowEnergyCharacteristic txChar = m_service->characteristic(QBluetoothUuid(BLE_UART_TX_CHAR));
if (!txChar.isValid()) {
    setError("TX Char not found.");
    qDebug("TX Char not found.");
}
else
{
    qDebug("TX Char found");

}
QLowEnergyDescriptor txDesc  = txChar.descriptor(QBluetoothUuid::ClientCharacteristicConfiguration);
if (!txDesc.isValid())
    return;

qDebug()<<"still trying to activate the notifications!";


// enable notification
m_service->writeDescriptor(txDesc, QByteArray::fromHex("0100"));



const QLowEnergyCharacteristic rxChar = m_service->characteristic(QBluetoothUuid(BLE_UART_RX_CHAR));
if (!rxChar.isValid()) {
    setError("RX Char not found.");
    qDebug("RX Char not found.");
}
else
{
    qDebug("RX Char found");

}
if (rxChar.properties() & QLowEnergyCharacteristic::WriteNoResponse)
    qDebug()<<"writenorespinse supported!";

m_service->writeCharacteristic(rxChar, QByteArray::fromHex("0100"));

m_service->writeCharacteristic(rxChar, QByteArray::fromHex("0100"));
m_service->writeCharacteristic(rxChar, QByteArray::fromHex("0100"));
//m_notificationDesc1 = rxChar.descriptor(QBluetoothUuid::ClientCharacteristicConfiguration);
// if (m_notificationDesc1.isValid())
    //m_service->writeDescriptor(m_notificationDesc, QByteArray::fromHex("0100"));





if (c.properties() & QLowEnergyCharacteristic::WriteNoResponse || c.properties() & QLowEnergyCharacteristic::Write)
{
    qDebug()<<"Characteristic Property: Write Found and m_writeCharacteristic is modified";
    m_writeCharacteristic = c;
    //update_connected(true);
    if(c.properties() & QLowEnergyCharacteristic::WriteNoResponse)
    {
        m_writeMode = QLowEnergyService::WriteWithoutResponse;
        qDebug()<<"write_mode -> without response"<<"starting timer";

    }
    else
    {
        m_writeMode = QLowEnergyService::WriteWithResponse;
    }

}
if (c.properties() & QLowEnergyCharacteristic::Read)
{
    qDebug()<<"Characteristic Property: Read";
    m_readCharacteristic = c;

}

QBluetoothUuid tmp_uuid(BLE_UART_TX_CHAR);

qDebug()<<"uuid in char in the loop:"<<c.uuid().toString()<<"uuid to compare with"<<tmp_uuid.toString();
if (  c.uuid() == (QBluetoothUuid) BLE_UART_TX_CHAR)
{
    qDebug()<<"COMPARE OK - > notification client char found";
    m_notificationDesc = c.descriptor(QBluetoothUuid::ClientCharacteristicConfiguration);

    if (m_notificationDesc.isValid()) {
        qDebug()<<"Characteristic Descriptor: ClientCharacteristicConfiguration";
        m_service->writeDescriptor(m_notificationDesc, QByteArray::fromHex("0100"));
    }
    else
    {
        qDebug()<<"couldnt attach notification for char";
    }
}
else {
    qDebug()<<"there was no BLUE_UART_TX_CHAR?!";
}
}
}                    //                    anchors.margins: AppConstants.fieldMargin*0.5

//                    Text {
//                        anchors.centerIn: parent
//                        font.pixelSize: AppConstants.tinyFontSize
//                        color: AppConstants.textColor
//                        text: qsTr("START")
//                    }
}
//                    anchors.right: rstIdxButton.left
//                    anchors.rightMargin: filIdxTxt.anchors.rightMargin


//anchors.left: parent.left
//                    anchors.right: filIdxTxt.left
//                    anchors.rightMargin: filIdxTxt.anchors.rightMargin



//                    anchors.margins: AppConstants.fieldMargin*0.5





}
//                    Image {
//                        anchors.centerIn: parent
//                        source: "images/baseline_replay_white_18dp.png"
//                    }

// PayloadLength Max 1 CHAR_MAX_LEN-1= 19
//    void sendCMDwaitforReply(quint8 cmd, quint8* payload, int payloadLength)
//    {
//        replyDelayTimer->setSingleShot(true);
//    }



//QApplication app(argc, argv);
// can be changed to QGuiApplication for QML only










indicator: Rectangle {
    implicitWidth: 48
    implicitHeight: 26
    x: parent.leftPadding
    y: parent.height / 2 - height / 2
    radius: 13
    color: parent.checked ? "#17a81a" : "#ffffff"
    border.color: parent.checked ? "#17a81a" : "#cccccc"

    Rectangle {
        x: parent.checked ? parent.width - width : 0
        width: 26
        height: 26
        radius: 13
        color: parent.down ? "#cccccc" : "#ffffff"
        border.color: parent.checked ? (parent.down ? "#17a81a" : "#21be2b") : "#999999"
    }
}


//QQmlContext *ctxt = engine.rootContext();
//ctxt->setContextProperty("termModel", QVariant::fromValue(term.m_ioBuff));
//qDebug() << qApp->primaryScreen()->size();




















