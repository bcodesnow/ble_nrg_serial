//    enum SomeType { A, B, C, D };
//    Q_ENUM(SomeType);

class TerminalDataObject : public QObject
{
    Q_OBJECT

    Q_PROPERTY(QString str MEMBER m_string NOTIFY strChanged)
    Q_PROPERTY(QColor clr MEMBER m_color NOTIFY clrChanged)
signals:
    void strChanged();
    void clrChanged();

private:
    QString m_string;
    QColor m_color;
public:
    TerminalDataObject(QObject *parent = nullptr, QString t_str = nullptr, QColor t_clr = nullptr): m_string(t_str), m_color(t_clr)
    {

    }

};

//        connect(m_service, SIGNAL(error(QLowEnergyService::ServiceError)),
//                this, SLOT(serviceError(QLowEnergyService::ServiceError)));

        //m_service->discoverDetails();

//        QString chars = "";
//        QList<QLowEnergyCharacteristic> clist = m_service->characteristics();
//        for (int i = 0; i < clist.size(); i++){
//            chars = clist.at(i).uuid().toString() + " - " + clist.at(i).name() + ": " + QString(clist.at(i).value());
//            chars = chars + ". Value size: " + QString::number(clist.at(i).value().size()) + "<br>";
//        }
//        if (chars.isEmpty()){
//            chars = "No characteristics found";
//        }
//        qDebug()<<chars;

//        const QLowEnergyCharacteristic txChar = m_service->characteristic(QBluetoothUuid(BLE_UART_TX_CHAR));
//        if (!txChar.isValid()) {
//            setError("TX Char not found.");
//            qDebug("TX Char not found.");
//        }
//        else
//        {
//            qDebug("TX Char found");

//        }
//        QLowEnergyDescriptor txDesc  = txChar.descriptor(QBluetoothUuid::ClientCharacteristicConfiguration);
//        if (!txDesc.isValid())
//            return;

//        qDebug()<<"still trying to activate the notifications!";


//        // enable notification
//        m_service->writeDescriptor(txDesc, QByteArray::fromHex("0100"));

        // disable notification
        //service->writeDescriptor(notification, QByteArray::fromHex("0000"));

        // wait until descriptorWritten() signal is emitted
        // to confirm successful write


setInfo(tr("Service discovered."));
qDebug("Service discovered.");

QString chars = "";
QList<QLowEnergyCharacteristic> clist = m_service->characteristics();
for (int i = 0; i < clist.size(); i++){
    chars = clist.at(i).uuid().toString() + " - " + clist.at(i).name() + ": " + QString(clist.at(i).value());
    chars = chars + ". Value size: " + QString::number(clist.at(i).value().size()) + "<br>";
}
if (chars.isEmpty()){
    chars = "No characteristics found";
}
qDebug()<<chars;

const QLowEnergyCharacteristic txChar = m_service->characteristic(QBluetoothUuid(BLE_UART_TX_CHAR));
if (!txChar.isValid()) {
    setError("TX Char not found.");
    qDebug("TX Char not found.");
}
else
{
    qDebug("TX Char found");

}
QLowEnergyDescriptor txDesc  = txChar.descriptor(QBluetoothUuid::ClientCharacteristicConfiguration);
if (!txDesc.isValid())
    return;

qDebug()<<"still trying to activate the notifications!";


// enable notification
m_service->writeDescriptor(txDesc, QByteArray::fromHex("0100"));



const QLowEnergyCharacteristic rxChar = m_service->characteristic(QBluetoothUuid(BLE_UART_RX_CHAR));
if (!rxChar.isValid()) {
    setError("RX Char not found.");
    qDebug("RX Char not found.");
}
else
{
    qDebug("RX Char found");

}
if (rxChar.properties() & QLowEnergyCharacteristic::WriteNoResponse)
    qDebug()<<"writenorespinse supported!";

m_service->writeCharacteristic(rxChar, QByteArray::fromHex("0100"));

m_service->writeCharacteristic(rxChar, QByteArray::fromHex("0100"));
m_service->writeCharacteristic(rxChar, QByteArray::fromHex("0100"));
//m_notificationDesc1 = rxChar.descriptor(QBluetoothUuid::ClientCharacteristicConfiguration);
// if (m_notificationDesc1.isValid())
    //m_service->writeDescriptor(m_notificationDesc, QByteArray::fromHex("0100"));





if (c.properties() & QLowEnergyCharacteristic::WriteNoResponse || c.properties() & QLowEnergyCharacteristic::Write)
{
    qDebug()<<"Characteristic Property: Write Found and m_writeCharacteristic is modified";
    m_writeCharacteristic = c;
    //update_connected(true);
    if(c.properties() & QLowEnergyCharacteristic::WriteNoResponse)
    {
        m_writeMode = QLowEnergyService::WriteWithoutResponse;
        qDebug()<<"write_mode -> without response"<<"starting timer";

    }
    else
    {
        m_writeMode = QLowEnergyService::WriteWithResponse;
    }

}
if (c.properties() & QLowEnergyCharacteristic::Read)
{
    qDebug()<<"Characteristic Property: Read";
    m_readCharacteristic = c;

}

QBluetoothUuid tmp_uuid(BLE_UART_TX_CHAR);

qDebug()<<"uuid in char in the loop:"<<c.uuid().toString()<<"uuid to compare with"<<tmp_uuid.toString();
if (  c.uuid() == (QBluetoothUuid) BLE_UART_TX_CHAR)
{
    qDebug()<<"COMPARE OK - > notification client char found";
    m_notificationDesc = c.descriptor(QBluetoothUuid::ClientCharacteristicConfiguration);

    if (m_notificationDesc.isValid()) {
        qDebug()<<"Characteristic Descriptor: ClientCharacteristicConfiguration";
        m_service->writeDescriptor(m_notificationDesc, QByteArray::fromHex("0100"));
    }
    else
    {
        qDebug()<<"couldnt attach notification for char";
    }
}
else {
    qDebug()<<"there was no BLUE_UART_TX_CHAR?!";
}
}
}
}
